// SMP v1.0

//threading model
//  --> teensythreads - 'preemptive' threading model
//  --> TaskScheduler - 'non-preemptive' threading model
//  --> https://stackoverflow.com/questions/4147221/preemptive-threads-vs-non-preemptive-threads

//teensythreads
#include "TeensyThreads.h"
// --> NB: don't access/use global objects (e.g. Serial etc.)
//           from different threads simultaneously.
//         do it, one-by-one (using some locking mechanism).

//oled
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define OLED_CLK    2
#define OLED_MOSI   3
#define OLED_RESET  4
#define OLED_DC     5
#define OLED_CS     6
Adafruit_SSD1306 display(OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);
#if (SSD1306_LCDHEIGHT != 64)
#error ("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif

//gps
#include <Adafruit_GPS.h>
Adafruit_GPS GPS(&Serial1);

//timer1
#include <TimerOne.h>
// NMEA string reader - 1ms timer interrupt
void readGPS(void) {
  GPS.read(); //read in 1 char.
}

//bounce
#include <Bounce.h>
Bounce buttonRecord = Bounce(20, 8); // 8 = 8 ms debounce time
Bounce buttonStop =   Bounce(16, 8);
Bounce buttonPlay =   Bounce(17, 8);

//audio
#include <Audio.h>
#include <Wire.h>
#include <SPI.h>
#include <SD.h>
#include <SerialFlash.h>
// GUItool: begin automatically generated code
AudioInputI2S i2s2;                      //xy=105,63
AudioAnalyzePeak peak1;                  //xy=278,108
AudioRecordQueue queue1;                 //xy=281,63
AudioPlaySdRaw playRaw1;                 //xy=302,157
AudioOutputI2S i2s1;                     //xy=470,120
AudioConnection patchCord1(i2s2, 0, queue1, 0);
AudioConnection patchCord2(i2s2, 0, peak1, 0);
AudioConnection patchCord3(playRaw1, 0, i2s1, 0);
AudioConnection patchCord4(playRaw1, 0, i2s1, 1);
AudioControlSGTL5000 sgtl5000_1;         //xy=265,212
// GUItool: end automatically generated code
// audioIn
//   --> which input on the audio shield will be used?
//const int audioIn = AUDIO_INPUT_LINEIN;
const int audioIn = AUDIO_INPUT_MIC;

//sd
// Use these with the Teensy Audio Shield
#define SDCARD_CS_PIN    10
#define SDCARD_MOSI_PIN  7
#define SDCARD_SCK_PIN   14
// Use these with the Teensy 3.5 & 3.6 SD card
//#define SDCARD_CS_PIN    BUILTIN_SDCARD
//#define SDCARD_MOSI_PIN  11  // not actually used
//#define SDCARD_SCK_PIN   13  // not actually used
// Use these for the SD+Wiz820 or other adaptors
//#define SDCARD_CS_PIN    4
//#define SDCARD_MOSI_PIN  11
//#define SDCARD_SCK_PIN   13

//others

// Remember which mode we're doing
int mode = 0;  // 0=stopped, 1=recording, 2=playing

// The file where data is recorded
File frec;
String filename; // a filename for recording or playing

// Current time and date
String datetime; // from internal timer or RTC and GPS time
String location; // from GPS location

//threads

//// System initialization
void setup() {

  //buttons

  // Configure the pushbutton pins
  pinMode(20, INPUT_PULLUP);
  pinMode(16, INPUT_PULLUP);
  pinMode(17, INPUT_PULLUP);

  //audio

  // Audio connections require memory, and the record queue
  // uses this memory to buffer incoming audio.
  AudioMemory(60);

  // Enable the audio shield, select input, and enable output
  sgtl5000_1.enable();
  sgtl5000_1.inputSelect(audioIn);
  sgtl5000_1.volume(0.5);

  //sd filesystem

  // Initialize the SD card
  SPI.setMOSI(SDCARD_MOSI_PIN);
  SPI.setSCK(SDCARD_SCK_PIN);
  if (!(SD.begin(SDCARD_CS_PIN))) {
    // stop here if no SD card, but print a message
    while (1) {
      Serial.println("Unable to access the SD card");
      delay(500);
    }
  }

  //serial - debug monitor
  Serial.begin(115200);

  //serial1 - GPS comm.
  // 9600 NMEA is the default baud rate for Adafruit MTK GPS's- some use 4800
  GPS.begin(9600);
  // uncomment this line to turn on RMC (recommended minimum) and GGA (fix data) including altitude
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
  // uncomment this line to turn on only the "minimum recommended" data
  //GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCONLY);
  // For parsing data, we don't suggest using anything but either RMC only or RMC+GGA since
  // the parser doesn't care about other sentences at this time
  // Set the update rate
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);     // 1 Hz update rate
  // For the parsing code to work nicely and have time to sort thru the data, and
  // print it out we don't suggest using anything higher than 1 Hz
  // Request updates on antenna status, comment out to keep quiet
  GPS.sendCommand(PGCMD_ANTENNA);
  //timer1 - readGPS() - read in 1 char.
  Timer1.initialize(1000); //1ms
  Timer1.attachInterrupt(readGPS);
  //
  delay(1000);
  // Ask for firmware version
  Serial1.println(PMTK_Q_RELEASE);

  //oled
  display.begin(SSD1306_SWITCHCAPVCC);
  // by default, we'll generate the high voltage from the 3.3v line internally! (neat!)
  // --> https://cdn-shop.adafruit.com/datasheets/SSD1306.pdf --> page 62 --> 2 Charge Pump Regulator

  //clear oled screen
  display.clearDisplay();
}

void loop() {
  // First, read the buttons
  buttonRecord.update();
  buttonStop.update();
  buttonPlay.update();

  // Respond to button presses
  if (buttonRecord.fallingEdge()) {
    Serial.println("Record Button Press");
    if (mode == 2) stopPlaying();
    if (mode == 0) startRecording();
  }
  if (buttonStop.fallingEdge()) {
    Serial.println("Stop Button Press");
    if (mode == 1) stopRecording();
    if (mode == 2) stopPlaying();
  }
  if (buttonPlay.fallingEdge()) {
    Serial.println("Play Button Press");
    if (mode == 1) stopRecording();
    if (mode == 0) startPlaying();
  }

  // If we're playing or recording, carry on...
  if (mode == 1) {
    continueRecording();
  }
  if (mode == 2) {
    continuePlaying();
  }

  // when using a microphone, continuously adjust gain
  if (audioIn == AUDIO_INPUT_MIC) {
    adjustMicLevel();
  }

  // gps parsing --> TODO: this part need to be parallel, but not interfereing too much for audio recording!
  if (mode == 0) {
    bool newGPS = false;
    ////
    noInterrupts();
    ////
    // if a sentence is received, we can check the checksum, parse it...
    if (GPS.newNMEAreceived()) {
      // a tricky thing here is if we print the NMEA sentence, or data
      // we end up not listening and catching other sentences!
      // so be very wary if using OUTPUT_ALLDATA and trytng to print out data
      //Serial.println(GPS.lastNMEA());   // this also sets the newNMEAreceived() flag to false

      if (GPS.parse(GPS.lastNMEA())) { // this also sets the newNMEAreceived() flag to false
        newGPS = true;
      }
    }
    ////
    interrupts();
    ////

    //oled --> TODO: when it is working busy (rec./play. etc.).. screen display stops..? or.. display elapsed time? --> cooperative scheduling or multi-threading?
    display.clearDisplay();

    //display - GPS
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0,0);
    //
    display.print("\nTime: ");
    display.print(GPS.hour,DEC); display.print(':');
    display.print(GPS.minute,DEC); display.print(':');
    display.print(GPS.seconds,DEC); display.print('.');
    display.println(GPS.milliseconds);
    display.print("Date: ");
    display.print(GPS.day,DEC); display.print('/');
    display.print(GPS.month,DEC); display.print("/20");
    display.println(GPS.year,DEC);
    display.print("Fix: "); display.print((int)GPS.fix);
    display.print(" quality: "); display.println((int)GPS.fixquality);
    if (GPS.fix) {
      display.print("Location: ");
      display.print(GPS.latitude,4); display.print(GPS.lat);
      display.print(", ");
      display.print(GPS.longitude,4); display.println(GPS.lon);
      display.print("Location (in degrees, works with Google Maps): ");
      display.print(GPS.latitudeDegrees,4);
      display.print(", ");
      display.println(GPS.longitudeDegrees,4);

      display.print("Speed (knots): "); display.println(GPS.speed);
      display.print("Angle: "); display.println(GPS.angle);
      display.print("Altitude: "); display.println(GPS.altitude);
      display.print("Satellites: "); display.println((int)GPS.satellites);
    }
    display.display();
  }
}

void startRecording() {
  Serial.println("startRecording");
  if (SD.exists("RECORD.RAW")) {
    // The SD library writes new data to the end of the
    // file, so to start a new recording, the old file
    // must be deleted before new data is written.
    SD.remove("RECORD.RAW");
  }
  frec = SD.open("RECORD.RAW", FILE_WRITE);
  if (frec) {
    queue1.begin();
    mode = 1;
  }
}

void continueRecording() {
  if (queue1.available() >= 2) {
    byte buffer[512];
    // Fetch 2 blocks from the audio library and copy
    // into a 512 byte buffer.  The Arduino SD library
    // is most efficient when full 512 byte sector size
    // writes are used.
    memcpy(buffer, queue1.readBuffer(), 256);
    queue1.freeBuffer();
    memcpy(buffer+256, queue1.readBuffer(), 256);
    queue1.freeBuffer();
    // write all 512 bytes to the SD card
    elapsedMicros usec = 0;
    frec.write(buffer, 512);
    // Uncomment these lines to see how long SD writes
    // are taking.  A pair of audio blocks arrives every
    // 5802 microseconds, so hopefully most of the writes
    // take well under 5802 us.  Some will take more, as
    // the SD library also must write to the FAT tables
    // and the SD card controller manages media erase and
    // wear leveling.  The queue1 object can buffer
    // approximately 301700 us of audio, to allow time
    // for occasional high SD card latency, as long as
    // the average write time is under 5802 us.
    //Serial.print("SD write, us=");
    //Serial.println(usec);
  }
}

void stopRecording() {
  Serial.println("stopRecording");
  queue1.end();
  if (mode == 1) {
    while (queue1.available() > 0) {
      frec.write((byte*)queue1.readBuffer(), 256);
      queue1.freeBuffer();
    }
    frec.close();
  }
  mode = 0;
}


void startPlaying() {
  Serial.println("startPlaying");
  playRaw1.play("RECORD.RAW");
  mode = 2;
}

void continuePlaying() {
  if (!playRaw1.isPlaying()) {
    playRaw1.stop();
    mode = 0;
  }
}

void stopPlaying() {
  Serial.println("stopPlaying");
  if (mode == 2) playRaw1.stop();
  mode = 0;
}

void adjustMicLevel() {
  // TODO: read the peak1 object and adjust sgtl5000_1.micGain()
  // if anyone gets this working, please submit a github pull request :-)
}
